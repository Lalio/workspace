package com.fcv.vms.server;

import java.nio.charset.Charset;
import java.util.Collections;
import java.util.Date;
import java.util.HashSet;
import java.util.Set;

import org.apache.mina.core.buffer.IoBuffer;
import org.apache.mina.core.service.IoHandlerAdapter;
import org.apache.mina.core.session.IoSession;
import org.apache.mina.core.session.IdleStatus;
import org.slf4j.Logger;

import com.fcv.vms.model.HibernateModel;
import com.fcv.vms.task.FlexMessageManager;
import com.fcv.vms.task.Task;
import com.fcv.vms.task.ThreadTask;
import com.fcv.vms.task.download.DownLoadTask;
import com.fcv.vms.task.file.FileManager;
import com.fcv.vms.task.setspeed.SetSpeedTask;
import com.fcv.vms.task.setip.SetIpTask;
import com.fcv.vms.task.upload.UpLoadTask;


public class MyHandler extends IoHandlerAdapter {
	
	private final Set<IoSession> sessions = Collections.synchronizedSet(new HashSet<IoSession>());  
		
	private HibernateModel model;
	private Charset charset;
	Date tdate,sdate,edate;
	public static Logger logger=org.slf4j.LoggerFactory.getLogger("Mina");
	
	public MyHandler(){
		charset=Charset.forName(common.CharsetString);
		setModel();
	}
	//通过VIN获得session
	private IoSession getSessionByVin(String vin){
		for(IoSession s:getSessions())
		{
			if(s.getAttribute(common.VIN).toString().equalsIgnoreCase(vin))
				return s;
		}
		return null;
	}
	
	public void messageReceived(IoSession session, Object msg) throws Exception {

		IoBuffer buf=(IoBuffer)msg;
		//System.out.println("message"+buf);
		//System.out.println(session.getAttribute(common.VIN)+" messageReceived()");
		if(buf.remaining()<32)
		   System.out.println("message"+buf);
		if(buf.remaining()==254)//接收上传文件
		{
			ThreadTask.executeTask(session, buf);
		}
		else if(buf.remaining()>40 && buf.remaining()<254)//接收数据
		{		
			//帧处理
			byte[] datas=new byte[buf.remaining()];

			//System.out.println(" datas:"+datas[0]);
			int sn=buf.get();
			//int sn=datas[0];
			String vin=buf.getString(17,charset.newDecoder());
		
			if(vin.equals(""))
				return;
			//byte[] vinbuf=new byte[17];
			//for(int i=0;i<17;i++)
				//vinbuf[i]=datas[i+1];
			//String vin=vinbuf.toString();
			//System.out.println("datas.length"+datas.length);
			buf.position(buf.position()-18);
			for(int i=0;i<datas.length;i++)
				datas[i]=buf.get();
			//for(int test=0;test<10;test++)
				//System.out.println(datas[test+226]);
			//for(int test1=0;test1<10;test1++)
				//System.out.println(datas[test1+440]);
			//System.out.println(" vin:"+vin);
			//int mark=buf.get();
			int mark=datas[18];
			int isFirst=Context.getContext(session).isFirst();
			int sid=0;
			if(isFirst==0)
			{
				session.setAttribute(common.VIN,vin);
				IoSession is=getSessionByVin(vin);
				if(is!=null)
				{
					sessions.remove(is);
					is.close(true);
				}
				getSessions().add(session);
				tdate=new Date();
				System.out.println("NEW VIN:"+vin+"--"+tdate);
				logger.error("New Connect VIN:"+vin);
				//故障超时......
                //读写注册表
				//model.OnProcessReg(vin,mark);
				//Date tdate=new Date();
				//写统计表
				sid=model.OnProcessReg(vin,mark,0);
				session.setAttribute(common.SID,sid);
				Context.getContext(session).setFirst(1);
			}
		    //写数据库
			sid=(Integer)session.getAttribute(common.SID);
			//sdate=new Date();
			int iscmd=model.OnSavedata(vin,datas,sid);
			//edate=new Date();
			//long dt=(edate.getTime()-sdate.getTime())/1000;
			//if(dt>1)
				//System.out.println("write DB:"+dt);
			//buf.position(buf.position()-10);
			//session.write(buf);
			//if(iscmd>0)
			//{
				//发送命令给车载端
				//Byte cmd=new Byte((byte)iscmd);
				//session.write(cmd);
			//}

		}
		else if(buf.remaining()>0 && buf.remaining()<40)//接收命令.remaining()
		{			
			int cmd=buf.get()&0xff;
			int cmd1=buf.get()&0xff;
			System.out.println("myhandler:"+buf);
			System.out.println("cmd:"+cmd);
			System.out.println("cmd1:"+cmd1);
			//int cmd2=buf.get()&0xff;
			if(cmd==0x3 && cmd1==0x4)//设置速率
			//if(cmd1==0x50)//设置速率
			{    System.out.println("high2");
				String vin=buf.getString(17,charset.newDecoder());
				System.out.println("init vin:"+vin);
				//String vin="A000004E1577191V2";
				IoSession is=getSessionByVin(vin);
				if(is==null)		
				{	
					System.out.println("接收到设置速率命令，但未找到车载端！");
					session.write(FlexMessageManager.getFlexErrorMessageFrame("未找到车载端！",vin));
				}	
				else
				{
					synchronized(session)		
					{
						if(Task.getTask(is)==null)
						{
							int speed1=buf.get()&0xff;
							int speed2=buf.get()&0xff;
							ThreadTask task=new SetSpeedTask(is,session,speed1,speed2,vin);
							Task.setTask(is, task);
							task.begin();
							System.out.println("接收到设置速率命令，开始任务！目标："+vin);
						}
						else
							session.write(FlexMessageManager.getFlexErrorMessageFrame("车载端正忙!",vin));
							
					}				
				}
			}
			if(cmd==0x3 && cmd1==0x5)//设置IP
			{    //System.out.println("high2");
				String vin=buf.getString(17,charset.newDecoder());
				System.out.println("set ip----vin:"+vin);
				//String vin="A000004E1577191V2";
				IoSession is=getSessionByVin(vin);
				if(is==null)		
				{	
					System.out.println("接收到设置IP命令，但未找到车载端！");
					session.write(FlexMessageManager.getFlexErrorMessageFrame("未找到车载端！",vin));
				}	
				else
				{
					synchronized(session)		
					{
						if(Task.getTask(is)==null)
						{
							String ip=buf.getString(buf.remaining(),charset.newDecoder());
							System.out.println("set ip----ip:"+ip);
							ThreadTask task=new SetIpTask(is,session,ip,vin);
							Task.setTask(is, task);
							task.begin();
							System.out.println("接收到设置IP命令，开始任务！目标："+vin);
						}
						else
							session.write(FlexMessageManager.getFlexErrorMessageFrame("车载端正忙!",vin));
							
					}				
				}
			}
			else if(cmd==3 && cmd1==6)//下载0x52
			//else if(cmd1==0x52)//下载0x52
			{
				System.out.println("high2");
				String vin=buf.getString(17,charset.newDecoder());
				System.out.println("load-vin:"+vin);
				//int length1=buf.get();
				//String name1=buf.getString(length1,charset.newDecoder());
				//System.out.println("load-name:"+name1);
				//String vin="A0000038C191A1DV2";
				IoSession is=getSessionByVin(vin);
				if(is==null)		
				{	
					System.out.println("接收到下载文件命令，但未找到车载端！");
					session.write(FlexMessageManager.getFlexErrorMessageFrame("未找到车载端！",vin));
				}	
				else
				{
					int length=buf.get();
					System.out.println("length:"+length);
					if(length>10)
						return;
					synchronized(session)
					{
						if(Task.getTask(is)==null)
						{
							String name=buf.getString(length,charset.newDecoder());
							//String name="new2.dat";
							ThreadTask task=new DownLoadTask(is,session,vin,name);
							System.out.println("load-name:"+name);
							Task.setTask(is, task);
							task.begin();
							System.out.println("接收到下载文件命令，开始任务！目标："+vin+"/文件："+name);
						}
						else
							session.write(FlexMessageManager.getFlexErrorMessageFrame("车载端正忙!",vin));	
					}
				}
			}
			else if(cmd==3 && cmd1==11)
			//else if(cmd1==0x51)//获取文件
			{
				
				session.write(FileManager.getProgramFiles());
				System.out.println("接收到获取文件清单命令！");
			}
			else if(cmd==3 && cmd1==12)
			//else if(cmd1==0x53)//上传开始
			{	
				synchronized(session)		
				{
					if(Task.getTask(session)==null)
					{
						int length=buf.get();
						String name=buf.getString(length,charset.newDecoder());
						Task task=new UpLoadTask(session,name);
						Task.setTask(session, task);
						task.begin();
						System.out.println("接收到上传文件命令，开始任务！文件："+name);	
					}		
				}
			}
			else if(cmd==3 && cmd1==13)//上传结束
			{
				synchronized(session)		
				{
					Task.getTask(session).end();
				}
			}	
			else if(cmd==0x1 && cmd1==0x2)
			{
				//ThreadTask.executeTask(session,buf);
				System.out.println("NEW VIN1");
				//int cmd2=buf.get()&0xff;
				//if(cmd2==1)
				//{
					//发送应答给车载端
					byte[] cmds=new byte[10];
					//IoBuffer cmds = IoBuffer.allocate(28);
					cmds[0]=0x34;
					cmds[2]=0x2;
					cmds[3]=0x2;
					cmds[1]=-18;
					cmds[2]=0x1;
					cmds[3]=0x1;
					cmds[4]=0x0;
					cmds[5]=0x0;
					cmds[6]=0x0;
					cmds[7]=0x0;
					byte check=cmds[0];
					for(int i=1;i<8;i++)
						check=(byte) (check^cmds[i]);
					cmds[8]=check;
					cmds[9]=-17;
					session.write(cmds);
				//}
			}
			else if(cmd==0x1)
			{
				buf.position(buf.position()-1);
				System.out.println("接收ACK:"+buf);
				ThreadTask.executeTask(session,buf);
			}
		}	
	}
	
	public void sessionClosed(IoSession s) throws Exception {	
		if(s.getAttribute(common.VIN)!=null)
		{
			Date tdate=new Date();
		    System.out.println(s.getAttribute(common.VIN)+" is offline!--"+tdate);
		    logger.error(s.getAttribute(common.VIN)+" is offline!");
		}
		//session关闭时如果该session有任务则任务退出
		synchronized(s)		
		{
			Task task=Task.getTask(s);
			if(task!=null)
				task.exit();
		}
	    getSessions().remove(s);
	    System.out.println("close session num is --"+getSessions().size());
	    s.close(true);
	}
	
	public void sessionCreated(IoSession s) throws Exception{
		//System.out.println("created");
		//s.write("ACK");
	 }

	public void exceptionCaught(IoSession s , Throwable t)throws Exception 
	{
		Date tdate=new Date();
	    System.out.println(s.getAttribute(common.VIN)+t.toString()+" exception!--"+tdate);
	    logger.error(s.getAttribute(common.VIN)+t.toString()+" exception!");
    }
	
    public void sessionIdle(IoSession session, IdleStatus is) throws Exception {
		Date tdate=new Date();
		if(session.getAttribute(common.VIN)!=null)
		{
    	   System.out.println(session.getAttribute(common.VIN)+":"+is.toString()+" timeout!--"+tdate);
    	   logger.error(session.getAttribute(common.VIN)+":"+is.toString()+" timeout!");
		}
		getSessions().remove(session);
		//session超时断开时如果该session有任务则任务退出
		Task task=Task.getTask(session);
		if(task!=null)
			task.exit();
		
		session.close(true);
    }
	
	public void setModel() {
		this.model=new HibernateModel();
	}

	public HibernateModel getModel() {
		return model;
	}
	public Set<IoSession> getSessions() {
		return sessions;
	}
}
